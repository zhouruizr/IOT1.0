<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LinqKit.1.1.2.0.Fakes</name>
    </assembly>
    <members>
        <member name="T:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1">
            <summary>LinqKit.ExpandableDbAsyncEnumerator`1 的填充码类型</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.#ctor(LinqKit.ExpandableDbAsyncEnumerator{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.Bind(System.Data.Entity.Infrastructure.IDbAsyncEnumerator)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.Bind(System.Data.Entity.Infrastructure.IDbAsyncEnumerator{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.Bind(System.IDisposable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.ConstructorIEnumeratorOfT0">
            <summary>设置 ExpandableDbAsyncEnumerator`1.ExpandableDbAsyncEnumerator`1(IEnumerator`1&lt;!0&gt; inner) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.CurrentGet">
            <summary>设置 ExpandableDbAsyncEnumerator`1.get_Current() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.CurrentSystemDataEntityInfrastructureIDbAsyncEnumeratorget">
            <summary>设置 ExpandableDbAsyncEnumerator`1.System.Data.Entity.Infrastructure.IDbAsyncEnumerator.get_Current() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.Dispose">
            <summary>设置 ExpandableDbAsyncEnumerator`1.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.MoveNextAsyncCancellationToken">
            <summary>设置 ExpandableDbAsyncEnumerator`1.MoveNextAsync(CancellationToken cancellationToken) 的 填充码</summary>
        </member>
        <member name="T:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.AllInstances.CurrentGet">
            <summary>设置 ExpandableDbAsyncEnumerator`1.get_Current() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.AllInstances.CurrentSystemDataEntityInfrastructureIDbAsyncEnumeratorget">
            <summary>设置 ExpandableDbAsyncEnumerator`1.System.Data.Entity.Infrastructure.IDbAsyncEnumerator.get_Current() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.AllInstances.Dispose">
            <summary>设置 ExpandableDbAsyncEnumerator`1.Dispose() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableDbAsyncEnumerator`1.AllInstances.MoveNextAsyncCancellationToken">
            <summary>设置 ExpandableDbAsyncEnumerator`1.MoveNextAsync(CancellationToken cancellationToken) 的 填充码</summary>
        </member>
        <member name="T:LinqKit.Fakes.ShimExpandableQuery`1">
            <summary>LinqKit.ExpandableQuery`1 的填充码类型</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.#ctor(LinqKit.ExpandableQuery{`0})">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.Bind(System.Data.Entity.Infrastructure.IDbAsyncEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.Bind(System.Data.Entity.Infrastructure.IDbAsyncEnumerable{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.Bind(System.Linq.IOrderedQueryable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.Bind(System.Linq.IQueryable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.Bind(System.Linq.IOrderedQueryable{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.Bind(System.Linq.IQueryable{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.Bind(System.Collections.IEnumerable)">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpandableQuery`1.Bind(System.Collections.Generic.IEnumerable{`0})">
            <summary>将接口的成员绑定到此填充码。</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.ConstructorIQueryableOfT0">
            <summary>设置 ExpandableQuery`1.ExpandableQuery`1(IQueryable`1&lt;!0&gt; inner) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.ElementTypeSystemLinqIQueryableget">
            <summary>设置 ExpandableQuery`1.System.Linq.IQueryable.get_ElementType() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.ExpressionSystemLinqIQueryableget">
            <summary>设置 ExpandableQuery`1.System.Linq.IQueryable.get_Expression() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.GetAsyncEnumerator">
            <summary>设置 ExpandableQuery`1.GetAsyncEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.GetEnumerator">
            <summary>设置 ExpandableQuery`1.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.InnerQueryGet">
            <summary>设置 ExpandableQuery`1.get_InnerQuery() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.ProviderSystemLinqIQueryableget">
            <summary>设置 ExpandableQuery`1.System.Linq.IQueryable.get_Provider() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.SystemCollectionsIEnumerableGetEnumerator">
            <summary>设置 ExpandableQuery`1.System.Collections.IEnumerable.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.SystemDataEntityInfrastructureIDbAsyncEnumerableGetAsyncEnumerator">
            <summary>设置 ExpandableQuery`1.System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.ToString">
            <summary>设置 ExpandableQuery`1.ToString() 的 填充码</summary>
        </member>
        <member name="T:LinqKit.Fakes.ShimExpandableQuery`1.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.AllInstances.ElementTypeSystemLinqIQueryableget">
            <summary>设置 ExpandableQuery`1.System.Linq.IQueryable.get_ElementType() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.AllInstances.ExpressionSystemLinqIQueryableget">
            <summary>设置 ExpandableQuery`1.System.Linq.IQueryable.get_Expression() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.AllInstances.GetAsyncEnumerator">
            <summary>设置 ExpandableQuery`1.GetAsyncEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.AllInstances.GetEnumerator">
            <summary>设置 ExpandableQuery`1.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.AllInstances.InnerQueryGet">
            <summary>设置 ExpandableQuery`1.get_InnerQuery() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.AllInstances.ProviderSystemLinqIQueryableget">
            <summary>设置 ExpandableQuery`1.System.Linq.IQueryable.get_Provider() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.AllInstances.SystemCollectionsIEnumerableGetEnumerator">
            <summary>设置 ExpandableQuery`1.System.Collections.IEnumerable.GetEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.AllInstances.SystemDataEntityInfrastructureIDbAsyncEnumerableGetAsyncEnumerator">
            <summary>设置 ExpandableQuery`1.System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpandableQuery`1.AllInstances.ToString01">
            <summary>设置 ExpandableQuery`1.ToString() 的 填充码</summary>
        </member>
        <member name="T:LinqKit.Fakes.ShimExpressionVisitor">
            <summary>LinqKit.ExpressionVisitor 的填充码类型</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpressionVisitor.#ctor(LinqKit.ExpressionVisitor)">
            <summary>初始化给定实例的新填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpressionVisitor.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExpressionVisitor.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.Constructor">
            <summary>设置 ExpressionVisitor.ExpressionVisitor() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitBinaryBinaryExpression">
            <summary>设置 ExpressionVisitor.VisitBinary(BinaryExpression b) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitBindingListReadOnlyCollectionOfMemberBinding">
            <summary>设置 ExpressionVisitor.VisitBindingList(ReadOnlyCollection`1&lt;MemberBinding&gt; original) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitBindingMemberBinding">
            <summary>设置 ExpressionVisitor.VisitBinding(MemberBinding binding) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitConditionalConditionalExpression">
            <summary>设置 ExpressionVisitor.VisitConditional(ConditionalExpression c) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitConstantConstantExpression">
            <summary>设置 ExpressionVisitor.VisitConstant(ConstantExpression c) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitElementInitializerElementInit">
            <summary>设置 ExpressionVisitor.VisitElementInitializer(ElementInit initializer) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitElementInitializerListReadOnlyCollectionOfElementInit">
            <summary>设置 ExpressionVisitor.VisitElementInitializerList(ReadOnlyCollection`1&lt;ElementInit&gt; original) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitExpression">
            <summary>设置 ExpressionVisitor.Visit(Expression exp) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitExpressionListReadOnlyCollectionOfExpression">
            <summary>设置 ExpressionVisitor.VisitExpressionList(ReadOnlyCollection`1&lt;Expression&gt; original) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitInvocationInvocationExpression">
            <summary>设置 ExpressionVisitor.VisitInvocation(InvocationExpression iv) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitLambdaLambdaExpression">
            <summary>设置 ExpressionVisitor.VisitLambda(LambdaExpression lambda) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitListInitListInitExpression">
            <summary>设置 ExpressionVisitor.VisitListInit(ListInitExpression init) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitMemberAccessMemberExpression">
            <summary>设置 ExpressionVisitor.VisitMemberAccess(MemberExpression m) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitMemberAssignmentMemberAssignment">
            <summary>设置 ExpressionVisitor.VisitMemberAssignment(MemberAssignment assignment) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitMemberInitMemberInitExpression">
            <summary>设置 ExpressionVisitor.VisitMemberInit(MemberInitExpression init) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitMemberListBindingMemberListBinding">
            <summary>设置 ExpressionVisitor.VisitMemberListBinding(MemberListBinding binding) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitMemberMemberBindingMemberMemberBinding">
            <summary>设置 ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding binding) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitMethodCallMethodCallExpression">
            <summary>设置 ExpressionVisitor.VisitMethodCall(MethodCallExpression m) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitNewArrayNewArrayExpression">
            <summary>设置 ExpressionVisitor.VisitNewArray(NewArrayExpression na) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitNewNewExpression">
            <summary>设置 ExpressionVisitor.VisitNew(NewExpression nex) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitParameterParameterExpression">
            <summary>设置 ExpressionVisitor.VisitParameter(ParameterExpression p) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitTypeIsTypeBinaryExpression">
            <summary>设置 ExpressionVisitor.VisitTypeIs(TypeBinaryExpression b) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.VisitUnaryUnaryExpression">
            <summary>设置 ExpressionVisitor.VisitUnary(UnaryExpression u) 的 填充码</summary>
        </member>
        <member name="T:LinqKit.Fakes.ShimExpressionVisitor.AllInstances">
            <summary>为所有实例成员定义填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitBinaryBinaryExpression">
            <summary>设置 ExpressionVisitor.VisitBinary(BinaryExpression b) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitBindingListReadOnlyCollectionOfMemberBinding">
            <summary>设置 ExpressionVisitor.VisitBindingList(ReadOnlyCollection`1&lt;MemberBinding&gt; original) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitBindingMemberBinding">
            <summary>设置 ExpressionVisitor.VisitBinding(MemberBinding binding) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitConditionalConditionalExpression">
            <summary>设置 ExpressionVisitor.VisitConditional(ConditionalExpression c) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitConstantConstantExpression">
            <summary>设置 ExpressionVisitor.VisitConstant(ConstantExpression c) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitElementInitializerElementInit">
            <summary>设置 ExpressionVisitor.VisitElementInitializer(ElementInit initializer) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitElementInitializerListReadOnlyCollectionOfElementInit">
            <summary>设置 ExpressionVisitor.VisitElementInitializerList(ReadOnlyCollection`1&lt;ElementInit&gt; original) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitExpression">
            <summary>设置 ExpressionVisitor.Visit(Expression exp) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitExpressionListReadOnlyCollectionOfExpression">
            <summary>设置 ExpressionVisitor.VisitExpressionList(ReadOnlyCollection`1&lt;Expression&gt; original) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitInvocationInvocationExpression">
            <summary>设置 ExpressionVisitor.VisitInvocation(InvocationExpression iv) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitLambdaLambdaExpression">
            <summary>设置 ExpressionVisitor.VisitLambda(LambdaExpression lambda) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitListInitListInitExpression">
            <summary>设置 ExpressionVisitor.VisitListInit(ListInitExpression init) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitMemberAccessMemberExpression">
            <summary>设置 ExpressionVisitor.VisitMemberAccess(MemberExpression m) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitMemberAssignmentMemberAssignment">
            <summary>设置 ExpressionVisitor.VisitMemberAssignment(MemberAssignment assignment) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitMemberInitMemberInitExpression">
            <summary>设置 ExpressionVisitor.VisitMemberInit(MemberInitExpression init) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitMemberListBindingMemberListBinding">
            <summary>设置 ExpressionVisitor.VisitMemberListBinding(MemberListBinding binding) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitMemberMemberBindingMemberMemberBinding">
            <summary>设置 ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding binding) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitMethodCallMethodCallExpression">
            <summary>设置 ExpressionVisitor.VisitMethodCall(MethodCallExpression m) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitNewArrayNewArrayExpression">
            <summary>设置 ExpressionVisitor.VisitNewArray(NewArrayExpression na) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitNewNewExpression">
            <summary>设置 ExpressionVisitor.VisitNew(NewExpression nex) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitParameterParameterExpression">
            <summary>设置 ExpressionVisitor.VisitParameter(ParameterExpression p) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitTypeIsTypeBinaryExpression">
            <summary>设置 ExpressionVisitor.VisitTypeIs(TypeBinaryExpression b) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExpressionVisitor.AllInstances.VisitUnaryUnaryExpression">
            <summary>设置 ExpressionVisitor.VisitUnary(UnaryExpression u) 的 填充码</summary>
        </member>
        <member name="T:LinqKit.Fakes.ShimExtensions">
            <summary>LinqKit.Extensions 的填充码类型</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.AsExpandableOf1IQueryableOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>设置 Extensions.AsExpandable(IQueryable`1&lt;!!0&gt; query) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.ExpandOf1ExpressionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0}})">
            <summary>设置 Extensions.Expand(Expression`1&lt;!!0&gt; expr) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.ForEachOf1IEnumerableOfM0ActionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Action{System.Collections.Generic.IEnumerable{``0},System.Action{``0}})">
            <summary>设置 Extensions.ForEach(IEnumerable`1&lt;!!0&gt; source, Action`1&lt;!!0&gt; action) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.InvokeOf1ExpressionOfFuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0}},``0})">
            <summary>设置 Extensions.Invoke(Expression`1&lt;Func`1&lt;!!0&gt;&gt; expr) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.InvokeOf2ExpressionOfFuncOfM0M1M0``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1}},``0,``1})">
            <summary>设置 Extensions.Invoke(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; expr, !!0 arg1) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.InvokeOf3ExpressionOfFuncOfM0M1M2M0M1``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},``0,``1,``2})">
            <summary>设置 Extensions.Invoke(Expression`1&lt;Func`3&lt;!!0,!!1,!!2&gt;&gt; expr, !!0 arg1, !!1 arg2) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.InvokeOf4ExpressionOfFuncOfM0M1M2M3M0M1M2``4(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},``0,``1,``2,``3})">
            <summary>设置 Extensions.Invoke(Expression`1&lt;Func`4&lt;!!0,!!1,!!2,!!3&gt;&gt; expr, !!0 arg1, !!1 arg2, !!2 arg3) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimExtensions.InvokeOf5ExpressionOfFuncOfM0M1M2M3M4M0M1M2M3``5(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},``0,``1,``2,``3,``4})">
            <summary>设置 Extensions.Invoke(Expression`1&lt;Func`5&lt;!!0,!!1,!!2,!!3,!!4&gt;&gt; expr, !!0 arg1, !!1 arg2, !!2 arg3, !!3 arg4) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimExtensions.ExpandExpression">
            <summary>设置 Extensions.Expand(Expression expr) 的 填充码</summary>
        </member>
        <member name="T:LinqKit.Fakes.ShimLinq">
            <summary>LinqKit.Linq 的填充码类型</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimLinq.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimLinq.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimLinq.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimLinq.ExprOf1ExpressionOfFuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0}}})">
            <summary>设置 Linq.Expr(Expression`1&lt;Func`1&lt;!!0&gt;&gt; expr) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimLinq.ExprOf2ExpressionOfFuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``1}}})">
            <summary>设置 Linq.Expr(Expression`1&lt;Func`2&lt;!!0,!!1&gt;&gt; expr) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimLinq.ExprOf3ExpressionOfFuncOfM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}})">
            <summary>设置 Linq.Expr(Expression`1&lt;Func`3&lt;!!0,!!1,!!2&gt;&gt; expr) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimLinq.FuncOf1FuncOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0},System.Func{``0}})">
            <summary>设置 Linq.Func(Func`1&lt;!!0&gt; expr) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimLinq.FuncOf2FuncOfM0M1``2(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,``1},System.Func{``0,``1}})">
            <summary>设置 Linq.Func(Func`2&lt;!!0,!!1&gt; expr) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimLinq.FuncOf3FuncOfM0M1M2``3(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Func{``0,``1,``2},System.Func{``0,``1,``2}})">
            <summary>设置 Linq.Func(Func`3&lt;!!0,!!1,!!2&gt; expr) 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimLinq.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LinqKit.Fakes.ShimPredicateBuilder">
            <summary>LinqKit.PredicateBuilder 的填充码类型</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimPredicateBuilder.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimPredicateBuilder.AndOf1ExpressionOfFuncOfM0BooleanExpressionOfFuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>设置 PredicateBuilder.And(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; expr1, Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; expr2) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimPredicateBuilder.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimPredicateBuilder.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimPredicateBuilder.FalseOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>设置 PredicateBuilder.False() 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimPredicateBuilder.OrOf1ExpressionOfFuncOfM0BooleanExpressionOfFuncOfM0Boolean``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>设置 PredicateBuilder.Or(Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; expr1, Expression`1&lt;Func`2&lt;!!0,Boolean&gt;&gt; expr2) 的 填充码</summary>
        </member>
        <member name="M:LinqKit.Fakes.ShimPredicateBuilder.TrueOf1``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}})">
            <summary>设置 PredicateBuilder.True() 的 填充码</summary>
        </member>
        <member name="P:LinqKit.Fakes.ShimPredicateBuilder.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
        <member name="T:LinqKit.Fakes.StubExpressionVisitor">
            <summary>LinqKit.ExpressionVisitor 的存根类型</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.#ctor">
            <summary>初始化新实例</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.InitializeStub">
            <summary>初始化 type StubExpressionVisitor 的新实例</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>设置 ExpressionVisitor.Visit(Expression exp) 的 存根</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>设置 ExpressionVisitor.VisitBinary(BinaryExpression b) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitBinaryBinaryExpression">
            <summary>设置 ExpressionVisitor.VisitBinary(BinaryExpression b) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitBinding(System.Linq.Expressions.MemberBinding)">
            <summary>设置 ExpressionVisitor.VisitBinding(MemberBinding binding) 的 存根</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitBindingList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.MemberBinding})">
            <summary>设置 ExpressionVisitor.VisitBindingList(ReadOnlyCollection`1&lt;MemberBinding&gt; original) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitBindingListReadOnlyCollectionOfMemberBinding">
            <summary>设置 ExpressionVisitor.VisitBindingList(ReadOnlyCollection`1&lt;MemberBinding&gt; original) 的 stub</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitBindingMemberBinding">
            <summary>设置 ExpressionVisitor.VisitBinding(MemberBinding binding) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>设置 ExpressionVisitor.VisitConditional(ConditionalExpression c) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitConditionalConditionalExpression">
            <summary>设置 ExpressionVisitor.VisitConditional(ConditionalExpression c) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>设置 ExpressionVisitor.VisitConstant(ConstantExpression c) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitConstantConstantExpression">
            <summary>设置 ExpressionVisitor.VisitConstant(ConstantExpression c) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitElementInitializer(System.Linq.Expressions.ElementInit)">
            <summary>设置 ExpressionVisitor.VisitElementInitializer(ElementInit initializer) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitElementInitializerElementInit">
            <summary>设置 ExpressionVisitor.VisitElementInitializer(ElementInit initializer) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitElementInitializerList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ElementInit})">
            <summary>设置 ExpressionVisitor.VisitElementInitializerList(ReadOnlyCollection`1&lt;ElementInit&gt; original) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitElementInitializerListReadOnlyCollectionOfElementInit">
            <summary>设置 ExpressionVisitor.VisitElementInitializerList(ReadOnlyCollection`1&lt;ElementInit&gt; original) 的 stub</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitExpression">
            <summary>设置 ExpressionVisitor.Visit(Expression exp) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitExpressionList(System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>设置 ExpressionVisitor.VisitExpressionList(ReadOnlyCollection`1&lt;Expression&gt; original) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitExpressionListReadOnlyCollectionOfExpression">
            <summary>设置 ExpressionVisitor.VisitExpressionList(ReadOnlyCollection`1&lt;Expression&gt; original) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>设置 ExpressionVisitor.VisitInvocation(InvocationExpression iv) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitInvocationInvocationExpression">
            <summary>设置 ExpressionVisitor.VisitInvocation(InvocationExpression iv) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>设置 ExpressionVisitor.VisitLambda(LambdaExpression lambda) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitLambdaLambdaExpression">
            <summary>设置 ExpressionVisitor.VisitLambda(LambdaExpression lambda) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <summary>设置 ExpressionVisitor.VisitListInit(ListInitExpression init) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitListInitListInitExpression">
            <summary>设置 ExpressionVisitor.VisitListInit(ListInitExpression init) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>设置 ExpressionVisitor.VisitMemberAccess(MemberExpression m) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitMemberAccessMemberExpression">
            <summary>设置 ExpressionVisitor.VisitMemberAccess(MemberExpression m) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>设置 ExpressionVisitor.VisitMemberAssignment(MemberAssignment assignment) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitMemberAssignmentMemberAssignment">
            <summary>设置 ExpressionVisitor.VisitMemberAssignment(MemberAssignment assignment) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>设置 ExpressionVisitor.VisitMemberInit(MemberInitExpression init) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitMemberInitMemberInitExpression">
            <summary>设置 ExpressionVisitor.VisitMemberInit(MemberInitExpression init) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitMemberListBinding(System.Linq.Expressions.MemberListBinding)">
            <summary>设置 ExpressionVisitor.VisitMemberListBinding(MemberListBinding binding) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitMemberListBindingMemberListBinding">
            <summary>设置 ExpressionVisitor.VisitMemberListBinding(MemberListBinding binding) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitMemberMemberBinding(System.Linq.Expressions.MemberMemberBinding)">
            <summary>设置 ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding binding) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitMemberMemberBindingMemberMemberBinding">
            <summary>设置 ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding binding) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>设置 ExpressionVisitor.VisitMethodCall(MethodCallExpression m) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitMethodCallMethodCallExpression">
            <summary>设置 ExpressionVisitor.VisitMethodCall(MethodCallExpression m) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>设置 ExpressionVisitor.VisitNew(NewExpression nex) 的 存根</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>设置 ExpressionVisitor.VisitNewArray(NewArrayExpression na) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitNewArrayNewArrayExpression">
            <summary>设置 ExpressionVisitor.VisitNewArray(NewArrayExpression na) 的 stub</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitNewNewExpression">
            <summary>设置 ExpressionVisitor.VisitNew(NewExpression nex) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>设置 ExpressionVisitor.VisitParameter(ParameterExpression p) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitParameterParameterExpression">
            <summary>设置 ExpressionVisitor.VisitParameter(ParameterExpression p) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitTypeIs(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>设置 ExpressionVisitor.VisitTypeIs(TypeBinaryExpression b) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitTypeIsTypeBinaryExpression">
            <summary>设置 ExpressionVisitor.VisitTypeIs(TypeBinaryExpression b) 的 stub</summary>
        </member>
        <member name="M:LinqKit.Fakes.StubExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>设置 ExpressionVisitor.VisitUnary(UnaryExpression u) 的 存根</summary>
        </member>
        <member name="F:LinqKit.Fakes.StubExpressionVisitor.VisitUnaryUnaryExpression">
            <summary>设置 ExpressionVisitor.VisitUnary(UnaryExpression u) 的 stub</summary>
        </member>
        <member name="P:LinqKit.Fakes.StubExpressionVisitor.CallBase">
            <summary>获取或设置一个值，该值指示是否应调用基方法而不调用回退行为</summary>
        </member>
        <member name="P:LinqKit.Fakes.StubExpressionVisitor.InstanceBehavior">
            <summary>获取或设置实例行为。</summary>
        </member>
        <member name="P:LinqKit.Fakes.StubExpressionVisitor.InstanceObserver">
            <summary>获取或设置实例观察者。</summary>
        </member>
        <member name="T:System.Linq.Fakes.ShimAggregateExtensions">
            <summary>System.Linq.AggregateExtensions 的填充码类型</summary>
        </member>
        <member name="M:System.Linq.Fakes.ShimAggregateExtensions.#ctor">
            <summary>初始化新的填充码实例</summary>
        </member>
        <member name="M:System.Linq.Fakes.ShimAggregateExtensions.AggregateBalancedAsyncOf1ExpressionOfM0ArrayFuncOfExpressionOfM0ExpressionOfM0ExpressionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{``0}[],System.Func{System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0}},System.Threading.Tasks.Task{System.Linq.Expressions.Expression{``0}}})">
            <summary>设置 AggregateExtensions.AggregateBalancedAsync(Expression`1&lt;!!0&gt;[] lambdas, Func`3&lt;Expression`1&lt;!!0&gt;,Expression`1&lt;!!0&gt;,Expression`1&lt;!!0&gt;&gt; operationToDo) 的 填充码</summary>
        </member>
        <member name="M:System.Linq.Fakes.ShimAggregateExtensions.AggregateBalancedAsyncOf1M0ArrayFuncOfExpressionExpressionM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,``0},System.Threading.Tasks.Task{``0}})">
            <summary>设置 AggregateExtensions.AggregateBalancedAsync(!!0[] lambdas, Func`3&lt;Expression,Expression,!!0&gt; operationToDo) 的 填充码</summary>
        </member>
        <member name="M:System.Linq.Fakes.ShimAggregateExtensions.AggregateBalancedOf1ExpressionOfM0ArrayFuncOfExpressionOfM0ExpressionOfM0ExpressionOfM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{System.Linq.Expressions.Expression{``0}[],System.Func{System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0}},System.Linq.Expressions.Expression{``0}})">
            <summary>设置 AggregateExtensions.AggregateBalanced(Expression`1&lt;!!0&gt;[] lambdas, Func`3&lt;Expression`1&lt;!!0&gt;,Expression`1&lt;!!0&gt;,Expression`1&lt;!!0&gt;&gt; operationToDo) 的 填充码</summary>
        </member>
        <member name="M:System.Linq.Fakes.ShimAggregateExtensions.AggregateBalancedOf1M0ArrayFuncOfExpressionExpressionM0``1(Microsoft.QualityTools.Testing.Fakes.FakesDelegates.Func{``0[],System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,``0},``0})">
            <summary>设置 AggregateExtensions.AggregateBalanced(!!0[] lambdas, Func`3&lt;Expression,Expression,!!0&gt; operationToDo) 的 填充码</summary>
        </member>
        <member name="M:System.Linq.Fakes.ShimAggregateExtensions.BehaveAsCurrent">
            <summary>为已填充的类型的所有方法分配“Current”行为</summary>
        </member>
        <member name="M:System.Linq.Fakes.ShimAggregateExtensions.BehaveAsNotImplemented">
            <summary>为已填充的类型的所有方法分配“NotImplemented”行为</summary>
        </member>
        <member name="P:System.Linq.Fakes.ShimAggregateExtensions.Behavior">
            <summary>为已填充的类型的所有方法分配行为</summary>
        </member>
    </members>
</doc>
